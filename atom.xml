<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blueslee 小站</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.bluesleeword.ml/"/>
  <updated>2020-01-28T06:00:26.012Z</updated>
  <id>https://www.bluesleeword.ml/</id>
  
  <author>
    <name>Blueslee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端优化干货链</title>
    <link href="https://www.bluesleeword.ml/2020/01/28/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E5%B9%B2%E8%B4%A7%E9%93%BE/"/>
    <id>https://www.bluesleeword.ml/2020/01/28/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E5%B9%B2%E8%B4%A7%E9%93%BE/</id>
    <published>2020-01-28T05:36:03.000Z</published>
    <updated>2020-01-28T06:00:26.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="汇总一些关于前端页面性能优化的帖子"><a href="#汇总一些关于前端页面性能优化的帖子" class="headerlink" title="汇总一些关于前端页面性能优化的帖子"></a>汇总一些关于前端页面性能优化的帖子</h1><blockquote><ol><li>性能预算（Performance budgets）【里面有推荐建议针对优化的各方面】<br><strong><em><a href="https://developers.google.com/web/tools/lighthouse/audits/budgets?utm_source=lighthouse&amp;utm_medium=unknown&amp;hl=zh_cn" target="_blank" rel="noopener">https://developers.google.com/web/tools/lighthouse/audits/budgets?utm_source=lighthouse&amp;utm_medium=unknown&amp;hl=zh_cn</a></em></strong></li></ol></blockquote><blockquote><ol start="2"><li>优化图片Optimize Images<br><strong><em><a href="https://developers.google.com/web/tools/lighthouse/audits/optimize-images?hl=zh_cn" target="_blank" rel="noopener">https://developers.google.com/web/tools/lighthouse/audits/optimize-images?hl=zh_cn</a></em></strong></li></ol></blockquote><blockquote><ol start="3"><li>资源优先级 – 让浏览器助您一臂之力<br><strong><em><a href="https://developers.google.com/web/fundamentals/performance/resource-prioritization" target="_blank" rel="noopener">https://developers.google.com/web/fundamentals/performance/resource-prioritization</a></em></strong></li></ol></blockquote><blockquote><ol start="4"><li>IntersectionObserver 延迟加载图像和其他媒体<br><strong><em><a href="https://developers.google.com/web/updates/2016/04/intersectionobserver" target="_blank" rel="noopener">https://developers.google.com/web/updates/2016/04/intersectionobserver</a></em></strong></li></ol></blockquote><blockquote><ol start="5"><li>loadCSS<br><strong><em><a href="https://github.com/filamentgroup/loadCSS" target="_blank" rel="noopener">https://github.com/filamentgroup/loadCSS</a></em></strong></li></ol></blockquote><blockquote><ol start="6"><li>阻塞渲染的 CSS<br><strong><em><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css" target="_blank" rel="noopener">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css</a></em></strong></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;汇总一些关于前端页面性能优化的帖子&quot;&gt;&lt;a href=&quot;#汇总一些关于前端页面性能优化的帖子&quot; class=&quot;headerlink&quot; title=&quot;汇总一些关于前端页面性能优化的帖子&quot;&gt;&lt;/a&gt;汇总一些关于前端页面性能优化的帖子&lt;/h1&gt;&lt;blockquote&gt;

      
    
    </summary>
    
    
      <category term="Frontends" scheme="https://www.bluesleeword.ml/categories/Frontends/"/>
    
    
      <category term="前端 优化" scheme="https://www.bluesleeword.ml/tags/%E5%89%8D%E7%AB%AF-%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Makedown 快速上手</title>
    <link href="https://www.bluesleeword.ml/2019/11/13/Makedown-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>https://www.bluesleeword.ml/2019/11/13/Makedown-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</id>
    <published>2019-11-13T07:19:00.000Z</published>
    <updated>2019-11-30T10:33:37.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通用规则"><a href="#通用规则" class="headerlink" title="通用规则"></a>通用规则</h1><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="文件扩展名"><a href="#文件扩展名" class="headerlink" title="文件扩展名"></a>文件扩展名</h3><p>使用 .md.<br>解释: 为什么不使用 .mkd 或者 .markdown?</p><ul><li>更短</li><li>更加流行</li><li>没有明显冲突</li></ul><a id="more"></a><h3 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h3><p>文件名建议使用如下的风格:</p><ul><li>用小写代替大写</li><li>把开头 <code>the</code>, <code>a</code>, <code>an</code> 除去</li><li>用连字符代替标点和空格</li><li>用一个连字符代替连续多个连字符，当多个连字符出现时，只使用一个</li><li>不在文件名前后使用连字符</li></ul><p>建议使用:<br><code>file-name.md</code><br>不建议, 多个连续的连字符:<br><code>file--name.md</code><br>不建议, 包围的连字符:<br><code>-file-name-.md</code><br>解释: 为何不使用下划线和驼峰大小写？连字符是现在最流行的网址分隔符，并且 Markdown 文件在上下文中经常使用:</p><ul><li>可能在同一个项目中有连字符分割的HTML文件使用Markdown相同的目录。</li><li>文件名会被直接使用到 URL 中. 比如: GitHub blobs.</li></ul><h2 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h2><h3 id="新行"><a href="#新行" class="headerlink" title="新行"></a>新行</h3><ul><li><em>不要</em> 使用连续两空行，也就是说，<em>不要</em> 连续使用两个换行符，除非是在代码块中不得已而必须出现。</li><li>以回车换行结束文件。<em>不要</em> 在文件结束时留下空行。</li><li><em>不要</em> 在行尾留空格除非是在行尾空出两个空格插入换行符。</li></ul><p>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- list</span><br><span class="line">- list</span><br><span class="line"></span><br><span class="line"># Header</span><br></pre></td></tr></table></figure><p>建议, 代码区块:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The markup language X requires you to use triple newlines to separate paragraphs:</span><br><span class="line"></span><br><span class="line">    p1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    p2</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- list</span><br><span class="line">- list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Header</span><br></pre></td></tr></table></figure><p>解释: 多空行占用更多的竖直屏幕空间，并且会严重影响到可读性。</p><h3 id="句子结束空格"><a href="#句子结束空格" class="headerlink" title="句子结束空格"></a>句子结束空格</h3><p>句子结束使用一个空格<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">First sentence. Second sentence.</span><br></pre></td></tr></table></figure><p>不建议, 使用2个空格:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">First sentence.  Second sentence.</span><br></pre></td></tr></table></figure><p>解释: 相比于<code>使用两个空格</code>的优点:</p><ul><li>容易编辑</li><li>通常不是必须的，如果使用 wrap:inner-sentence or wrap:sentence</li><li>space-sentence:2 对可读性造成一种错误的感觉，因为忽略了输出的 HTML 文件。</li><li>容易查看一句话的结束</li></ul><h2 id="自动换行"><a href="#自动换行" class="headerlink" title="自动换行"></a>自动换行</h2><p>尝试将一行限制在 80 个字符以下，将长段落按照以下的逻辑分开，例如:</p><ul><li>句子: 一句话结束 . 之后, 问句问号 ? 或者感叹句 ! 之后</li><li><a href="clauseshttp://www.oxforddictionaries.com/words/clauses" target="_blank" rel="noopener">子句</a>: 在单词 and, which, if … then, 逗号 , 之后</li><li><a href="http://www.oxforddictionaries.com/words/phrases" target="_blank" rel="noopener">短语 phrases</a></li></ul><p>一行中超过80个字符是可以接受的，但是记住长句子不适合阅读，并且在 git diff 中会很难看。</p><p>设置你的文本编辑器对 Markdown 文件一行<em>不要</em> 超过80字符，以免忘记。</p><p>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This is a very very very very very very very very very very very very very long not wrapped sentence.</span><br><span class="line">Second sentence of of the paragraph,</span><br><span class="line">third sentence of a paragraph</span><br><span class="line">and the fourth one.</span><br></pre></td></tr></table></figure><p>解释:</p><ul><li>Diffs 工具看起来更好, 因为一个子句的修改在 diff 工具中显示为一行修改.</li><li>临时的换行不会降低对 Markdown 文件的可读性， 因为唯一的语言特性，可以缩进表示层次结构的就是嵌套列表。</li><li>现在除了 GitHub 在 README 和评论中将单独一行解释成回车。 没有其他主流的解释引擎这么做，使用换行是非常安全的。</li><li>一些工具对较长的一行不友好，比如 Vim 并且 git diff 默认并不换行. 这些不友好都可以通过配置除去，对于git，使用 git config –global core.pager ‘less -r’ 对于Vim可以使用 set wrap 来自动换行.</li></ul><p>缺点:</p><ul><li>需要在写作时增加顾虑，尤其是在修改代码的时候。</li><li>Markdown 看起来和渲染输出不同, 输出没有换行符。</li><li>手动的换行可以让 Markdown 比生成的文档更加易读， 当然这样做的同时，也造成了一种虚假的可读性错觉，让人感觉没有长段落。</li><li>需要用户拥有使用可编程文本编辑器，类似 Vim，可以通过配置来换行。<a href="https://github.com/editorconfig/editorconfig/issues/168" target="_blank" rel="noopener">EditorConfig gave it WONTFIX</a></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="Shell中美元符号"><a href="#Shell中美元符号" class="headerlink" title="Shell中美元符号"></a>Shell中美元符号</h3><p><em>不要</em> 在 shell 代码前加 $ 符号，除非你想要展示命令的输出。<br>如果目的是表明确切的语言，那么直接在代码前标明。<br>解释: 复制粘贴比较困难，不利于阅读。<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo a</span><br><span class="line">echo a &gt; file</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo a</span><br><span class="line">$ echo a &gt; file</span><br></pre></td></tr></table></figure><p>建议, 展示输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ echo a</span><br><span class="line">a</span><br><span class="line">$ echo a &gt; file</span><br></pre></td></tr></table></figure><p>建议, 在代码前标明代码语言:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Use the following Bash code:</span><br><span class="line">echo a</span><br><span class="line">echo a &gt; file</span><br></pre></td></tr></table></figure><h3 id="标记代码内容"><a href="#标记代码内容" class="headerlink" title="标记代码内容"></a>标记代码内容</h3><p>使用代码块，或者行内代码：</p><ul><li>可执行文件。 比如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`gcc` is the best compiler available.</span><br></pre></td></tr></table></figure>注意将工具名字和项目工程名字区别开来。比如： <code>gcc</code> vs GCC.</li><li>文件路径</li><li>程序版本号</li><li>大写的缩写解释:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xinetd stands for `eXtended Internet daemon`</span><br></pre></td></tr></table></figure></li><li>其他和电脑相关的术语，想要单独标明</li></ul><p><em>不要</em>标记为代码：<br>项目名。 比如： GCC<br>函数库名。比如： libc, glibc</p><h3 id="拼写和语法"><a href="#拼写和语法" class="headerlink" title="拼写和语法"></a>拼写和语法</h3><p>使用正确的拼写和语法。<br>尽量选用英语，更准确的说美式英语。 解释: 美式英语使用者占有最大的GDP，尤其是在计算机行业。<br>类似 URL 或者代码，添加代码标记，这样拼写检查程序会自动忽略。<br>注意大小写敏感的拼写错误，尤其是项目名，品牌名，或者缩写。</p><ul><li>建议使用: URL, LinkedIn, DoS attack</li><li>不建议： url, Linkedin, dos attack</li></ul><p>一旦有疑惑，尽量选用和维基百科相同的缩写。<br>避免使用非正式的缩写:</p><ul><li>建议使用: biography, repository, directory</li><li>不建议： bio, repo, dir</li></ul><h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><h2 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h2><p>避免使用换行符, 因为他们没有被广泛认可的语义。<br>在少数确实需要使用的时候，在行尾使用两个空格。</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h3 id="atx风格"><a href="#atx风格" class="headerlink" title="atx风格"></a>atx风格</h3><p>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Header 1</span><br><span class="line"></span><br><span class="line">## Header 2</span><br><span class="line"></span><br><span class="line">### Header 3</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Header 1</span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">Header 2</span><br><span class="line">--------</span><br><span class="line"></span><br><span class="line">### Header 3</span><br></pre></td></tr></table></figure><ul><li><p>解释: 相比 Setex 优势有:</p><ul><li>容易书写，因为在 Setex 中，为了好看需要书写和标题相同数量的符号</li><li>可以生成所有的等级，而 Setex 只能生成两种等级</li><li>只占用一行，而 Setex 占用两行</li><li>更加明显。 Not very important if you have syntax highlighting.</li></ul></li><li><p>在 <code>#</code> 和标题之间加入一个空格.<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Header</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#Header</span><br><span class="line"></span><br><span class="line">#..Header</span><br></pre></td></tr></table></figure></li><li><p><em>不要</em> 使用闭合的<code>#</code>.<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Header</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Header #</span><br></pre></td></tr></table></figure><p>解释: 容易维护。</p></li><li><p><em>不要</em> 在<code>#</code>前加入空格.<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Header</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.# Header</span><br></pre></td></tr></table></figure></li><li><p><em>不要</em> 跳跃使用标题等级.<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Header 1</span><br><span class="line"></span><br><span class="line">## Header 2</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Header 1</span><br><span class="line"></span><br><span class="line">### Header 3</span><br></pre></td></tr></table></figure></li><li><p>在标题上下用空行隔开，除非标题在文档开头。<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Before.</span><br><span class="line"></span><br><span class="line"># Header 1</span><br><span class="line"></span><br><span class="line">## Header 2</span><br><span class="line"></span><br><span class="line">After.</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Before.</span><br><span class="line"># Header 1</span><br><span class="line"></span><br><span class="line">## Header 2</span><br><span class="line">After.</span><br></pre></td></tr></table></figure></li><li><p>避免 在相同 Markdown 文件中使用相同的标题.<br>解释: 许多的 Markdown 解释器会依据标题的内容生成标题的IDs。<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Dogs</span><br><span class="line"></span><br><span class="line">## Anatomy of the dog</span><br><span class="line"></span><br><span class="line"># Cats</span><br><span class="line"></span><br><span class="line">## Anatomy of the cat</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Dogs</span><br><span class="line"></span><br><span class="line">## Anatomy</span><br><span class="line"></span><br><span class="line"># Cats</span><br><span class="line"></span><br><span class="line">## Anatomy</span><br></pre></td></tr></table></figure></li></ul><h3 id="顶级标题"><a href="#顶级标题" class="headerlink" title="顶级标题"></a>顶级标题</h3><p>如果你想要 HTML 直接输出，这样唯一的<code>h1</code>标记就是输出的第一件事，并且会成为文档的标题。这就是HTML的顶级标题。<br><code>h1</code>标题的产生受到使用的 Markdown 引擎的直接影响： 一些引擎会从元数据（metadata）中产生标题，比如 Jekyll 就是从 front-matter 中产生标题。<br>将顶级标题保存为元数据（metadata）可以更加方便的在其他地方使用， 比如，在全局索引中，但也有缺点，比如降低了可读性和移植性。<br>如果目的不是生成顶级标题， include it in your markdown file. E.g., GitHub.<br>索引文件中的顶级标题比如<code>README.md</code>或者<code>index.md</code>应该作为他们父目录的标题。<br>顶级标题的缺点：</p><ul><li><p>占用了一级标题。这就意味只剩下5个层级标题可以使用。 并且这样每一个新的标题就会多使用一个 <code>#</code>符号,这样看起来不好。</p></li><li><p>重复了文件名, 通常已经可以直接从 URL 中读到。 在大多数的情况下，文件名可以直接转换成顶级标题， 比如: 从 some-filename.md 到 Some filename.</p></li></ul><p>顶级标题的优点:</p><ul><li>比URL更加易读，尤其是对非技术出身用户。</li></ul><h3 id="标题大小写"><a href="#标题大小写" class="headerlink" title="标题大小写"></a>标题大小写</h3><ul><li>标题开头使用大写字母，除非标题内容总是以小写出现, 例如，计算机代码。<br>建议使用:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Header</span><br></pre></td></tr></table></figure>建议使用, 代码通常以小写开始：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># int main</span><br></pre></td></tr></table></figure>不建议：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># header</span><br></pre></td></tr></table></figure></li><li>其他字母按照句子中原始大小写。<br>建议使用:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># The header of the example</span><br></pre></td></tr></table></figure>不建议：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># The Header of the Example</span><br></pre></td></tr></table></figure>例外,<a href="http://en.wikipedia.org/wiki/Title_case#Title_case" target="_blank" rel="noopener">首字大写</a> 对 <a href="http://einverne.github.io/markdown-style-guide/zh.html#top-level-header" target="_blank" rel="noopener">顶级标题</a> 可选择性支持。 请异常谨慎地使用, in cases where typographical perfection is important, 比如：项目的 README .<br>解释: 为什么对所有标题<a href="http://en.wikipedia.org/wiki/Title_case#Title_case" target="_blank" rel="noopener">首字大写</a>? 如果要决定句子中每一个单词大小写会花费太多精力。</li></ul><h3 id="标题结尾"><a href="#标题结尾" class="headerlink" title="标题结尾"></a>标题结尾</h3><p>显示标题的内容，而不是用新标题和水平线紧随其后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Header</span><br><span class="line"></span><br><span class="line">Content</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">Outside header.</span><br></pre></td></tr></table></figure><h3 id="标题长度"><a href="#标题长度" class="headerlink" title="标题长度"></a>标题长度</h3><p>保证标题越短越好。<br>避免使用长句子，总结长句子作为标题，然后将长句子作为标题下的第一小节。<br>解释: 以后引用方便，尤其是自动生成 IDs 或者生成 TOC 。<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Huge header</span><br><span class="line"></span><br><span class="line">Huge header that talks about a complex subject.</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Huge header that talks about a complex subject</span><br></pre></td></tr></table></figure><h3 id="标题结尾标点"><a href="#标题结尾标点" class="headerlink" title="标题结尾标点"></a>标题结尾标点</h3><p><em>不要</em> 在标题中以<code>:</code>结尾。<br>解释: 每一个标题都是接下来内容的简介，这也就正是冒号的作用。<br><em>不要</em> 在标题中以<code>.</code>结尾。<br>解释: 每一个标题都包含一个简短的句子，也就不需要句号来分隔他们。<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># How to do make omelet</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># How to do make omelet:</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># How to do make omelet.</span><br></pre></td></tr></table></figure><h3 id="标题同义词"><a href="#标题同义词" class="headerlink" title="标题同义词"></a>标题同义词</h3><p>标题用作用户索引的关键词。<br>正由于这个原因，你可能希望在标题中用多个关键词。<br>要做到这一点，简单的创建一个同义词标题在主标题之前，并且标题下不包含内容。<br>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Purchase</span><br><span class="line"></span><br><span class="line"># Buy</span><br><span class="line"></span><br><span class="line">You give money and get something in return.</span><br></pre></td></tr></table></figure><p>每一个同层级的空标题都假定是同义的。如果层级不一样，那就是另外的含义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Animals</span><br><span class="line"></span><br><span class="line">## Dog</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li>在符号 <code>&gt;</code> 后面接一个空格。<br>建议使用:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; a</span><br></pre></td></tr></table></figure>不建议：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;a</span><br></pre></td></tr></table></figure>不建议, 2个空格:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;  a</span><br></pre></td></tr></table></figure></li><li>在每一行使用 &gt; 符号，包括换行的句子。<br>建议使用:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Long line</span><br><span class="line">&gt; that was wrapped.</span><br></pre></td></tr></table></figure>不建议：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Long line</span><br><span class="line">that was wrapped.</span><br></pre></td></tr></table></figure></li><li><em>不要</em> 在单独的引用中使用空行。<br>建议使用:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; a</span><br><span class="line">&gt;</span><br><span class="line">&gt; b</span><br></pre></td></tr></table></figure>不建议：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; a</span><br><span class="line"></span><br><span class="line">&gt; b</span><br></pre></td></tr></table></figure></li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h3><h4 id="无序"><a href="#无序" class="headerlink" title="无序"></a>无序</h4><p>使用连字符.<br>建议使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- a</span><br><span class="line">- b</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* a</span><br><span class="line">* b</span><br><span class="line">+ a</span><br><span class="line">+ b</span><br></pre></td></tr></table></figure><p>解释:</p><ul><li>星号 * 可能和加粗和斜体符号产生混淆。</li><li>加号 + 不流行。</li></ul><h4 id="有序"><a href="#有序" class="headerlink" title="有序"></a>有序</h4><p>尽量选用 <code>1.</code>来标记有序的列表, 除非你打算通过数字在相同 Markdown 文件或者外部文件中引用他们。<br>尽量使用无序的列表，除非有通过数字引用的需求。<br>最佳则是从来不通过序号来引用他们：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- a</span><br><span class="line">- c</span><br><span class="line">- b</span><br></pre></td></tr></table></figure><p>较好的方法, 仅仅使用 1.:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. a</span><br><span class="line">1. c</span><br><span class="line">1. b</span><br></pre></td></tr></table></figure><p>较差的方法, <em>不要</em> 通过序号来标注列表项的顺序:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. a</span><br><span class="line">2. c</span><br><span class="line">3. b</span><br></pre></td></tr></table></figure><p>可接受的, 使用文本引用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">The ouput of the `ls` command is of the form:</span><br><span class="line"></span><br><span class="line">    drwx------  2 ciro ciro        4096 Jul  5  2013 dir0</span><br><span class="line">    drwx------  4 ciro ciro        4096 Apr 27 08:00 dir1</span><br><span class="line">    1           2</span><br><span class="line"></span><br><span class="line">Where:</span><br><span class="line"></span><br><span class="line">1. permissions</span><br><span class="line">2. number of files directory contains</span><br></pre></td></tr></table></figure><p>可接受，通过外部 markdown 文件引用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Terms of use.</span><br><span class="line"></span><br><span class="line">1. I will not do anything illegal.</span><br><span class="line">2. I will not do anything that can harm the website.</span><br></pre></td></tr></table></figure><p>解释:</p><ul><li>如果你想要改变列表中的一个列表项，你<em>不要</em> 修改它下面的列表项。<br>Diffs 工具只会显示被修改的重要的内容。</li><li>如果序列有两位，也不需要额外注意，内容保持一致。 比如：下面不对齐：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9. a</span><br><span class="line">10. b</span><br></pre></td></tr></table></figure></li><li>如果新列表项被加入，引用会破坏。尽量减少这种问题：<ul><li>保证引用靠近列表，这样作者会更少可能的忘记去更新</li><li>当从外部引用时，总是引用到一个固定版本的 markdown 文件</li></ul></li></ul><h3 id="列表项中的空格"><a href="#列表项中的空格" class="headerlink" title="列表项中的空格"></a>列表项中的空格</h3><p>列表项标记前总是留有一个空格。<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- a</span><br><span class="line"></span><br><span class="line">  b</span><br><span class="line"></span><br><span class="line">- c</span><br></pre></td></tr></table></figure><p>不建议, 两个空格:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-  a</span><br><span class="line"></span><br><span class="line">   b</span><br><span class="line"></span><br><span class="line">-  c</span><br></pre></td></tr></table></figure><h3 id="列表内容的缩进"><a href="#列表内容的缩进" class="headerlink" title="列表内容的缩进"></a>列表内容的缩进</h3><p>列表中内容的缩进层级必须和第一个列表项一致：<br>建议(如果符合列表标记之后的空格):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- item 1</span><br><span class="line"></span><br><span class="line">  Content 1</span><br><span class="line"></span><br><span class="line">- item 2</span><br><span class="line"></span><br><span class="line">  Content 2</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- item 1</span><br><span class="line"></span><br><span class="line">    Content 1</span><br><span class="line"></span><br><span class="line">- item 2</span><br><span class="line"></span><br><span class="line">    Content 2</span><br></pre></td></tr></table></figure><p>避免开始直接使用缩进的代码列表项，因为这样不容易实现。<a href="http://spec.commonmark.org/0.12/#example-176" target="_blank" rel="noopener">CommonMark states that</a>一个单独的空格需要加入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-     code</span><br><span class="line"></span><br><span class="line">  a</span><br></pre></td></tr></table></figure><h3 id="列表中的空行"><a href="#列表中的空行" class="headerlink" title="列表中的空行"></a>列表中的空行</h3><p>如果每一个列表项只有一行, <em>不要</em> 在列表项之间增加空行，否则，在每一个列表项之间增加空行。<br>建议使用, single lines:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- item 1</span><br><span class="line">- item 2</span><br><span class="line">- item 3</span><br></pre></td></tr></table></figure><p>不建议, single lines:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- item 1</span><br><span class="line"></span><br><span class="line">- item 2</span><br><span class="line"></span><br><span class="line">- item 3</span><br></pre></td></tr></table></figure><p>多行情况下，建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- item that</span><br><span class="line">  is wrapped</span><br><span class="line"></span><br><span class="line">- item 2</span><br><span class="line"></span><br><span class="line">- item 3</span><br></pre></td></tr></table></figure><p>多行情况下，不建议:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- item that</span><br><span class="line">  is wrapped</span><br><span class="line">- item 2</span><br><span class="line">- item 3</span><br></pre></td></tr></table></figure><p>建议使用, 多行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- item 1</span><br><span class="line"></span><br><span class="line">  - item 11</span><br><span class="line">  - item 12</span><br><span class="line">  - item 13</span><br><span class="line"></span><br><span class="line">- item 2</span><br><span class="line"></span><br><span class="line">- item 3</span><br></pre></td></tr></table></figure><p>不建议, 多行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- item 1</span><br><span class="line"></span><br><span class="line">  - item 11</span><br><span class="line">  - item 12</span><br><span class="line">  - item 13</span><br><span class="line"></span><br><span class="line">- item 2</span><br><span class="line">- item 3</span><br></pre></td></tr></table></figure><p>解释: 如果没有空行，很难分别多行的列表项开始和结束。</p><h3 id="列表外的空行"><a href="#列表外的空行" class="headerlink" title="列表外的空行"></a>列表外的空行</h3><p>列表外建议留有一空行。<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Before.</span><br><span class="line"></span><br><span class="line">- list</span><br><span class="line">- list</span><br><span class="line"></span><br><span class="line">After.</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Before.</span><br><span class="line">- item</span><br><span class="line">- item</span><br><span class="line">After.</span><br></pre></td></tr></table></figure><h3 id="列表项首字母大小写"><a href="#列表项首字母大小写" class="headerlink" title="列表项首字母大小写"></a>列表项首字母大小写</h3><p>每一个 list 使用原来在句子中的大小写.<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I want to eat:</span><br><span class="line"></span><br><span class="line">- apples</span><br><span class="line">- bananas</span><br><span class="line">- grapes</span><br></pre></td></tr></table></figure><p>因为它可以被如下替换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I want to eat apples</span><br><span class="line">I want to eat babanas</span><br><span class="line">I want to eat grapes</span><br></pre></td></tr></table></figure><p>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">To ride a bike you have to:</span><br><span class="line"></span><br><span class="line">- get on top of the bike. This step is easy.</span><br><span class="line">- put your foot on the pedal.</span><br><span class="line">- push t the pedal. This is the most fun part.</span><br></pre></td></tr></table></figure><p>因为它可以被如下替换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">To ride a bike you have to get on top of the bike. This step is easy.</span><br><span class="line">To ride a bike you have to put your foot on the pedal.</span><br><span class="line">To ride a bike you have to push the pedal. This is the most fun part.</span><br></pre></td></tr></table></figure><p>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># How to ride a bike</span><br><span class="line"></span><br><span class="line">- Get on top of the bike.</span><br><span class="line">- Put your feet on the pedal.</span><br><span class="line">- Make the pedal turn.</span><br></pre></td></tr></table></figure><p>因为它可以被如下替换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># How to ride a bike</span><br><span class="line"></span><br><span class="line">Get on top of the bike.</span><br><span class="line">Put your feet on the pedal.</span><br><span class="line">Push the the pedal.</span><br></pre></td></tr></table></figure><h3 id="列表项结尾标点"><a href="#列表项结尾标点" class="headerlink" title="列表项结尾标点"></a>列表项结尾标点</h3><p>列表项结尾标点，除非:</p><ul><li>包含多个句子或者短语</li><li>以大写字母开头</li></ul><p>否则, 如果以句号结尾的话，省略标点.<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- apple</span><br><span class="line">- banana</span><br><span class="line">- orange</span><br></pre></td></tr></table></figure><p>不建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- apple.</span><br><span class="line">- banana.</span><br><span class="line">- orange.</span><br></pre></td></tr></table></figure><p>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- go to the market</span><br><span class="line">- then buy some fruit</span><br><span class="line">- finally eat the fruit</span><br></pre></td></tr></table></figure><p>建议使用, 不以句号结尾，而是以其他标点结尾：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- go to the marked</span><br><span class="line">- then buy fruit?</span><br><span class="line">- of course!</span><br></pre></td></tr></table></figure><p>不建议, 多个句子时末尾不加标点:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- go to the market</span><br><span class="line">- then buy some fruit. Bad for wallet</span><br><span class="line">- finally eat the fruit. Good for tummy</span><br></pre></td></tr></table></figure><p>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- go to the market</span><br><span class="line">- then buy some fruit. Bad for wallet.</span><br><span class="line">- finally eat the fruit. Good for tummy.</span><br></pre></td></tr></table></figure><p>注意：没有任何理由阻止，一个列表项以句号结尾，另一个列表项没有。</p><p>不建议, 多段落:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- go to the market</span><br><span class="line"></span><br><span class="line">- then buy some fruit</span><br><span class="line"></span><br><span class="line">  Bad for wallet</span><br><span class="line"></span><br><span class="line">- finally eat the fruit</span><br><span class="line"></span><br><span class="line">  Good for tummy</span><br></pre></td></tr></table></figure><p>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- go to the market</span><br><span class="line"></span><br><span class="line">- then buy some fruit.</span><br><span class="line"></span><br><span class="line">  Bad for wallet.</span><br><span class="line"></span><br><span class="line">- finally eat the fruit.</span><br><span class="line"></span><br><span class="line">  Good for tummy.</span><br></pre></td></tr></table></figure><p>不建议, 如果以大写字母开头，添加标点:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- Go to the market</span><br><span class="line">- Then buy some fruit</span><br><span class="line">- Finally eat the fruit</span><br></pre></td></tr></table></figure><p>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- Go to the market.</span><br><span class="line">- Then buy some fruit.</span><br><span class="line">- Finally eat the fruit.</span><br></pre></td></tr></table></figure><h2 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h2><p><em>避免</em> 使用定义列表扩展，因为他并没有被多数实现，也没有出现在 CommonMark.<br>相反, 使用:</p><ul><li><p>格式化列表:</p><ul><li>用加粗，链接，或者代码，格式化需要定义的内容</li><li>将内容和定义使用冒号和空格分割 <code>:.</code></li><li><em>不要</em> 对齐定义，这样难以维护，并且不会显示在 HTML 输出</li></ul></li></ul><p>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- **apple**: red fruit</span><br><span class="line">- **dog**: noisy animal</span><br></pre></td></tr></table></figure><p>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- **apple**: red fruit.</span><br><span class="line"></span><br><span class="line">  Very tasty.</span><br><span class="line"></span><br><span class="line">- **dog**: noisy animal.</span><br><span class="line"></span><br><span class="line"> Not tasty.</span><br></pre></td></tr></table></figure><p>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [apple](http://apple.com): red fruit</span><br><span class="line">- [dot](http://dog.com): red fruit</span><br></pre></td></tr></table></figure><p>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- `-f`: force</span><br><span class="line">- `-r`: recursive</span><br></pre></td></tr></table></figure><p>不建议, 没有冒号:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- **apple** red fruit</span><br><span class="line">- **dog** noisy animal</span><br></pre></td></tr></table></figure><p>不建议, 在术语和冒号之间有空格:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- **apple** : red fruit</span><br><span class="line">- **dog** : noisy animal</span><br></pre></td></tr></table></figure><p>不建议, 定义对齐:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- **apple**: red fruit</span><br><span class="line">- **dog**:   noisy animal</span><br></pre></td></tr></table></figure><ul><li>headers.</li></ul><p>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Apple</span><br><span class="line"></span><br><span class="line">Red fruit</span><br><span class="line"></span><br><span class="line"># Dog</span><br><span class="line"></span><br><span class="line">Noisy animal</span><br></pre></td></tr></table></figure><h2 id="代码区域"><a href="#代码区域" class="headerlink" title="代码区域"></a>代码区域</h2><h3 id="可选-code-fenced"><a href="#可选-code-fenced" class="headerlink" title="可选 code:fenced"></a>可选 code:fenced</h3><p>仅仅使用 fenced code blocks.<br>和缩进代码区块比较：</p><ul><li>不足: 不是标准 markdown 语法, 因此缺少移植性，但是加入到CommonMark.</li><li>优点: 实现方式多, 包括 GitHub’s, 并且允许指定代码的语言。</li></ul><p><em>不要</em> 缩进 fenced code blocks.<br>总是指定代码的语言。<br>建议使用:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = 1</span><br></pre></td></tr></table></figure><h3 id="可选-code-indented"><a href="#可选-code-indented" class="headerlink" title="可选 code:indented"></a>可选 code:indented</h3><p>仅仅使用缩进代码区域。<br>代码区域缩进4个空格。</p><p>代码区块必须以一空行隔开。<br>尽量在代码块之前使用冒号结束短语<code>:</code>。<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use this code to blow up your PC:</span><br><span class="line"></span><br><span class="line">    sudo rm -rf /</span><br></pre></td></tr></table></figure><p>不建议, 没有冒号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use this code to blow up your PC</span><br><span class="line"></span><br><span class="line">    sudo rm -rf /</span><br></pre></td></tr></table></figure><h2 id="水平横线"><a href="#水平横线" class="headerlink" title="水平横线"></a>水平横线</h2><p><em>不要</em> 使用水平线除非表明<a href="http://einverne.github.io/markdown-style-guide/zh.html#end-of-a-header" target="_blank" rel="noopener">End of a header</a>.<br>解释:</p><ul><li>标题比区块更好，因为标题就是区块的开始，并且说明了区块的内容。</li><li>水平线没有可接受的语义。 这份风格指南给了语义。</li></ul><p>使用 3 个无空格连字符:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>扩展.</p><ul><li>用一空行包围表格。</li><li><em>不要</em> 缩进表格。</li><li>用 <code>|</code>包裹表格的每一行。</li><li>竖直对齐所有表格边框。</li><li>将标题和内容用连字符分割，用对齐的 <code>|</code>。</li><li><code>|</code> 周围必须要有一个空格，除非是外部的 <code>|</code>。</li><li>列的宽度通过列中最长的单元格确定。</li></ul><p>建议表格:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Before.</span><br><span class="line"></span><br><span class="line">| h    | Long header |</span><br><span class="line">|------|-------------|</span><br><span class="line">| abc  | def         |</span><br><span class="line">| abc2 | def2        |</span><br><span class="line"></span><br><span class="line">After.</span><br></pre></td></tr></table></figure><p>解释:</p><ul><li>不对齐的表格很容易书写，但是对齐的表格更加易读，并且人们读代码比编辑要更多。</li><li>开始的 <code>|</code> 更加容易看出表格的开始和结束。结尾的<code>|</code>让人看起来更加舒服，因为对称。</li><li>这些工具让表格对齐更加容易。比如，Vim 有 <a href="https://github.com/godlygeek/tabular" target="_blank" rel="noopener">Tabular plugin</a>插件，这个插件让我们可以使用 <code>:Tabular /|</code>来使整个表格对齐。</li><li>为什么在连字符分割行 <code>|</code> 没有空格包围, 比如: <code>|---|</code>而不是 <code>| - |</code>? 没有空格看起来更好，在GitHub可行， 缺点: 编辑器中自动对齐实现困难，因为对于分割行需要特殊的规则。</li></ul><h2 id="分离相连的列表"><a href="#分离相连的列表" class="headerlink" title="分离相连的列表"></a>分离相连的列表</h2><p>分离连续:</p><ul><li>列表</li><li>缩进的代码块</li><li>引用</li><li>列表之后跟随额外的代码块</li></ul><p>使用一个空白的 HTML 注释 <code>&lt;!-- --&gt;</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- list 1</span><br><span class="line">- list 1</span><br><span class="line"></span><br><span class="line">&lt;!-- --&gt;</span><br><span class="line"></span><br><span class="line">- list 2</span><br><span class="line">- list 2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    code 1</span><br><span class="line">    code 1</span><br><span class="line"></span><br><span class="line">&lt;!-- --&gt;</span><br><span class="line"></span><br><span class="line">    code 2</span><br><span class="line">    code 2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; blockquote 1</span><br><span class="line">&gt; blockquote 1</span><br><span class="line"></span><br><span class="line">&lt;!-- --&gt;</span><br><span class="line"></span><br><span class="line">&gt; blockquote 2</span><br><span class="line">&gt; blockquote 2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- list</span><br><span class="line">- list</span><br><span class="line"></span><br><span class="line">&lt;!-- --&gt;</span><br><span class="line"></span><br><span class="line">    code outside list</span><br><span class="line">    code outside list</span><br></pre></td></tr></table></figure><h1 id="Span元素"><a href="#Span元素" class="headerlink" title="Span元素"></a>Span元素</h1><p><em>不要</em> 使用内部空格。<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**bold**</span><br><span class="line">`code`</span><br><span class="line">[link](http://a.com)</span><br><span class="line">[text][name]</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">** bold **</span><br><span class="line">` code `</span><br><span class="line">[ link ]( http://a.com )</span><br><span class="line">[text] [name]</span><br></pre></td></tr></table></figure><p>对于空格至关重要的行内代码：</p><ul><li>在写作过程中解释空格存在的必要性</li><li>如果可能在空格之后加入其他内容</li></ul><p>建议使用:<br><code>使用连字符并跟随一个空格来表示无序列表。</code><br>解释: 大多数的浏览器不会生成包围的空格，或者复制的时候不会将他们添加到粘贴板。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="参考样式链接"><a href="#参考样式链接" class="headerlink" title="参考样式链接"></a>参考样式链接</h3><p>链接:</p><ul><li>使用结尾的<code>[]</code>隐式链接：<br>建议使用:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a][]</span><br></pre></td></tr></table></figure>不建议：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a]</span><br></pre></td></tr></table></figure>解释: 省略<code>[]</code>大多数主要的实现都可以使用，但是这种方式并没有在文档中有实现，原始 Markdown 也没有提到。</li></ul><p>定义:</p><ul><li>必须写到文件末</li><li>必须以ID字符顺序排列</li><li><em>不要</em> 使用尖括号包裹URL</li><li>align URLs and link names as in a table</li><li>链接 IDs 仅仅使用小写字母. 解释: 因为 IDs 区分大小写,</li><li>只用小写容易书写，并且可读性比大小写混合单词大很多。</li></ul><p>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[id2]     http://long-url.com</span><br><span class="line">[long id] http://a.com        &quot;name 1&quot;</span><br></pre></td></tr></table></figure><p>不建议, 没有安装 id 排序:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[b] http://a.com</span><br><span class="line">[a] http://b.com</span><br></pre></td></tr></table></figure><p>不建议, 没有对齐:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[id] http://id.com</span><br><span class="line">[long id] http://long-id.com</span><br></pre></td></tr></table></figure><h3 id="单引号或双引号标题"><a href="#单引号或双引号标题" class="headerlink" title="单引号或双引号标题"></a>单引号或双引号标题</h3><p>使用双引号，<em>不要</em> 使用单引号。<br>解释: 单引号并不是在所有的实现中都有效，但是双引号可以。</p><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><p>使用双星号格式: <code>**bold**</code>.<br>解释: 比双下划线格式<code>__bold__</code>更加常见和可读性更高.</p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>使用单星号格式: <code>*italic*</code>.<br>解释:</p><ul><li>比下划线格式更加常见，易读性更高</li><li>与加粗格式一致, 同样使用星号标记</li></ul><h3 id="大写强调"><a href="#大写强调" class="headerlink" title="大写强调"></a>大写强调</h3><p><em>不要</em> 使用大写来强调: 使用强调语法例如 <strong>加粗</strong>或者<em>斜体</em> 。</p><p>解释: CSS 有<code>text-transform:uppercase</code>属性,如果你愿意的话，可以轻松在全网站实现相同的效果。</p><h3 id="强调与标题"><a href="#强调与标题" class="headerlink" title="强调与标题"></a>强调与标题</h3><p><em>不要</em> 使用强调元素(加粗或者斜体) 来介绍多行区块: 使用标题代替.</p><p>解释: 这个就是确切的标题的语义, 使用强调的并不是必须的。作为结果，许多实现，给标题增加有用的功能，并没有给强调元素，比如自动 <code>id</code>来更加容易的引用标题。</p><p>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># How to make omelets</span><br><span class="line"></span><br><span class="line">Break an egg.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># How to bake bread</span><br><span class="line"></span><br><span class="line">Open the flour sack.</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">**How to make omelets:**</span><br><span class="line"></span><br><span class="line">Break an egg.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">**How to bake bread:**</span><br><span class="line"></span><br><span class="line">Open the flour sack.</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h2><h3 id="使用尖括号自动链接"><a href="#使用尖括号自动链接" class="headerlink" title="使用尖括号自动链接"></a>使用尖括号自动链接</h3><ul><li><p><em>不要</em> 使用不带尖括号的自动链接。<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://a.com&gt;</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://a.com</span><br></pre></td></tr></table></figure><p>解释: 这个扩展中,<code>&lt;&gt;</code>容易从键盘敲出，也同样容易读。</p></li><li><p>如果你不想文字链接自动链接，将他们以代码区块方式包裹，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`http://not-a-link.com`</span><br></pre></td></tr></table></figure><p>解释: 许多工具自动将 http 开头的字串解释成链接。</p></li></ul><h3 id="内容的自动链接"><a href="#内容的自动链接" class="headerlink" title="内容的自动链接"></a>内容的自动链接</h3><p>所有自动链接必须以字串<code>http</code>开始。<br>特别的, <em>不要</em> 在相对链接时使用自动链接。如果遇到相对链接，使用括号的方式创建链接。<br>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[file.html](file.html)</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;file.html&gt;</span><br></pre></td></tr></table></figure><p>建议使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;https://github.com&gt;</span><br></pre></td></tr></table></figure><p>不建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;github.com&gt;</span><br></pre></td></tr></table></figure><p>解释: 将自动链接从HTML tags区分开很困难. 如果你想要一个相对的链接指向一个 <code>script</code> 的文件？</p><h3 id="电子邮件自动链接"><a href="#电子邮件自动链接" class="headerlink" title="电子邮件自动链接"></a>电子邮件自动链接</h3><p><em>不要</em> 使用电子邮件自动链接 <code>&lt;address@example.com&gt;</code>. 使用纯HTML .</p><p>解释: 标准 markdown 设计规范这样描述:</p><blockquote><p>“performs a bit of randomized decimal and hex entity-encoding to help obscure your address from address-harvesting spambots”.</p></blockquote><p>因此, 输出是随机的，丑陋的, 并且像规范中提到的:</p><blockquote><p>but an address published in this way will probably eventually start receiving spam</p></blockquote><h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><p>Markdown 风格指南 is License</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;通用规则&quot;&gt;&lt;a href=&quot;#通用规则&quot; class=&quot;headerlink&quot; title=&quot;通用规则&quot;&gt;&lt;/a&gt;通用规则&lt;/h1&gt;&lt;h2 id=&quot;文件&quot;&gt;&lt;a href=&quot;#文件&quot; class=&quot;headerlink&quot; title=&quot;文件&quot;&gt;&lt;/a&gt;文件&lt;/h2&gt;&lt;h3 id=&quot;文件扩展名&quot;&gt;&lt;a href=&quot;#文件扩展名&quot; class=&quot;headerlink&quot; title=&quot;文件扩展名&quot;&gt;&lt;/a&gt;文件扩展名&lt;/h3&gt;&lt;p&gt;使用 .md.&lt;br&gt;解释: 为什么不使用 .mkd 或者 .markdown?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更短&lt;/li&gt;
&lt;li&gt;更加流行&lt;/li&gt;
&lt;li&gt;没有明显冲突&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://www.bluesleeword.ml/categories/Blog/"/>
    
      <category term="Markdown" scheme="https://www.bluesleeword.ml/categories/Blog/Markdown/"/>
    
    
      <category term="Markdown" scheme="https://www.bluesleeword.ml/tags/Markdown/"/>
    
      <category term="Blog" scheme="https://www.bluesleeword.ml/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>谨防移动端网页的坑</title>
    <link href="https://www.bluesleeword.ml/2019/11/13/%E8%B0%A8%E9%98%B2%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%9A%84%E5%9D%91/"/>
    <id>https://www.bluesleeword.ml/2019/11/13/%E8%B0%A8%E9%98%B2%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%9A%84%E5%9D%91/</id>
    <published>2019-11-13T07:13:08.000Z</published>
    <updated>2019-12-01T11:45:59.053Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载自一位不愿透露姓名的开发者</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在平时的 H5 移动端开发时，我们难免会遇到各种各样的坑点，这篇文章就带着大家来看看怎么解决，文章较长，建议收藏方便以后查阅！</p><h2 id="弹出框中的滚动事件冒泡导致-body-也滚动"><a href="#弹出框中的滚动事件冒泡导致-body-也滚动" class="headerlink" title="弹出框中的滚动事件冒泡导致 body 也滚动"></a>弹出框中的滚动事件冒泡导致 body 也滚动</h2><p>如下图所示，当弹出框内容在滚动时，如果滚动到边界，会导致页面内容也会跟着滚动<br><img src="https://i.imgur.com/sUl9iBK.jpg?200x" alt=""></p><h4 id="解决方案-一"><a href="#解决方案-一" class="headerlink" title="解决方案 一"></a>解决方案 一</h4><p>在显示对话框时，将 <code>html</code> 和 <code>body</code> 的 <code>height</code> 都设置为 100%，<code>overflow</code> 都设置为 <code>hidden</code>，<code>position</code> 都设置为 <code>relative</code>, 然后在对话框关闭时将 <code>html</code> 和 <code>body</code> 的 <code>height</code> 与 <code>overflow</code> 属性都设置为 <code>auto</code>。</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>当瞬间给 html 和 body 身上设置<code>{height:100%;overflow:hidden;position:relative;}</code>时，页面会返回到顶部，性能会受影响。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>当弹框弹出时记录下此时的滚动条高度，当关闭弹框时 赋值给 window</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> offsetTop = <span class="built_in">window</span>.scrollTop;</span><br><span class="line"><span class="built_in">window</span>.scrollTo(<span class="number">0</span>, offsetTop);</span><br></pre></td></tr></table></figure><h4 id="解决方案-二"><a href="#解决方案-二" class="headerlink" title="解决方案 二"></a>解决方案 二</h4><p>在 body 内加一层<code>div.scroll-wrapper</code>，这个 div 包含页面的所有显示内容但不包含弹出框，<code>.scroll-wrapper</code>和<code>html</code>还有<code>body</code>的<code>height</code>都为<code>100%</code>，<br><code>html</code>和<code>body</code>的<code>overflow</code>为<code>hidden</code>，<code>.scroll-wrapper</code>的<code>overflow为scroll</code>。<br>让<code>.scroll-wrapper</code>的<code>div</code>来控制页面内容的滚动。<br>因为弹出框是通过 fix 布局不属于<code>.scroll-wrapper</code>的子元素，所以滚动不会冒泡到<code>.scroll-wrapper</code>上。<br>DOM 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scroll-wrapper"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span></span><br><span class="line">          banner</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>p <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mask"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS 代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll-wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: scroll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ol><li>js 无法监听 window 的滚事件，以及元素 的 offsetTop 值也会随页面滚动变化 （页面需要用到的 window.scrollTop 和 offsetTop 时）</li><li>ios 设备上自设的滚动条相当卡顿，下面会提到。</li></ol><h3 id="最终解决方案：😄"><a href="#最终解决方案：😄" class="headerlink" title="最终解决方案：😄"></a>最终解决方案：😄</h3><p>当触发弹出层时禁止 document 身上的默认触摸行为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"touchmove"</span>, _preventDefault, &#123; <span class="attr">passive</span>: <span class="literal">false</span> &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>passive: false 这个必须得加，兼容 ios.<br>当关闭弹出层时开启 document 身上的触摸行为：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.removeEventListener(</span><br><span class="line">  <span class="string">"touchmove"</span>,</span><br><span class="line">  ev =&gt; &#123;</span><br><span class="line">    ev.preventDefault();</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">passive</span>: <span class="literal">false</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="ios-设备自定义滚动条不流畅问题"><a href="#ios-设备自定义滚动条不流畅问题" class="headerlink" title="ios 设备自定义滚动条不流畅问题"></a>ios 设备自定义滚动条不流畅问题</h2><h4 id="解决方案-一-1"><a href="#解决方案-一-1" class="headerlink" title="解决方案 一"></a>解决方案 一</h4><p>给滚动元素添加 css 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-overflow-scrolling</span>: <span class="selector-tag">touch</span>;</span><br></pre></td></tr></table></figure><blockquote><p>原理：这也可以开启了 IOS 系统的硬件加速功能，所以会提升用户体验。</p></blockquote><h5 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h5><h6 id="缺点-1-在苹果手机上使用了-webkit-overflow-scrolling-touch-后，"><a href="#缺点-1-在苹果手机上使用了-webkit-overflow-scrolling-touch-后，" class="headerlink" title="缺点 1. 在苹果手机上使用了-webkit-overflow-scrolling:touch;后，"></a>缺点 1. 在苹果手机上使用了<code>-webkit-overflow-scrolling:touch;</code>后，</h6><p>可能会导致使用<code>position:fixed;</code>固定定位的元素，随着页面一起滚动，只有滚动停止时才会恢复原位，但是如果不用<code>-webkit-overflow-scrolling:touch;</code>这个属性的话，<br>使用<code>overflow-y:scroll</code>;属性的盒子滑动就会非常不流畅。</p><h6 id="对应处理方法"><a href="#对应处理方法" class="headerlink" title="对应处理方法"></a>对应处理方法</h6><p>使用 overflow-y 属性的元素不应该和固定元素在一个层级，使用 overflow-y 属性的元素外面加一层和固定元素在同一层级可以解决该问题。</p><h6 id="缺点-2-最严重的，页面会出现假死，滚动到底部，滚不动了。"><a href="#缺点-2-最严重的，页面会出现假死，滚动到底部，滚不动了。" class="headerlink" title="缺点 2. 最严重的，页面会出现假死，滚动到底部，滚不动了。"></a>缺点 2. 最严重的，页面会出现假死，滚动到底部，滚不动了。</h6><p>为什么会有卡住不动的这个 bug？<br>最常见的例子就是：</p><ol><li>在 safari 上，使用了-webkit-overflow-scrolling:touch 之后，页面偶尔会卡住不动。</li><li>在 safari 上，点击其他区域，再在滚动区域滑动，滚动条无法滚动的 bug。</li><li>通过动态添加内容撑开容器，结果根本不能滑动的 bug。<br>这个 bug 产生于 ios8 以上（不十分肯定，但在 ios5~7 上需要手动使用 translateZ(0)打开硬件加速）。<br>Safari 对于 overflow-scrolling 用了原生控件来实现。<br>对于有-webkit-overflow-scrolling 的网页，会创建一个 UIScrollView，提供子 layer 给渲染模块使用。</li></ol><h6 id="webkit-overflow-scrolling-touch的其他坑："><a href="#webkit-overflow-scrolling-touch的其他坑：" class="headerlink" title="-webkit-overflow-scrolling:touch的其他坑："></a><code>-webkit-overflow-scrolling:touch</code>的其他坑：</h6><p>除此之外，这个属性还有很多 bug，包括且不限于以下几种：</p><ol><li>滚动中 scrollTop 属性不会变化</li><li>手势可穿过其他元素触发元素滚动</li><li>滚动时暂停其他 transition</li></ol><h6 id="对应处理方法-1"><a href="#对应处理方法-1" class="headerlink" title="对应处理方法"></a>对应处理方法</h6><ol><li>保证使用了该属性的元素上没有设置定位<br>如果出现偶尔卡住不动的情况，那么在使用该属性的元素上不设置定位或者手动设置定位为 static<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">static</span>;</span><br></pre></td></tr></table></figure>这样会解决<code>部分</code>因为定位(relative、fixed、absolute)导致的页面偶尔不能滚动的 bug。<br>但是滑动到顶部继续手指往下滑，或者到底部继续往上滑，还是会触发卡住的问题（其实是整个页面上下回弹），说他算 bug，其实就是 ios8 以上的特性，<br>如果滚动区域大一点，用户不会觉得这是 bug，如果小了，用户会不知道发生了什么而卡住了。<br>视频在这，<a href="https://www.youtube.com/watch?v=MkAVYbO_joo" target="_blank" rel="noopener">https://www.youtube.com/watch?v=MkAVYbO_joo</a></li><li>如果添加动态内容页面不能滚动，让子元素 height+1<br>如果在<code>-webkit-overflow-scrolling:touch</code>属性的元素上，想通过动态添加内容来撑开容器，触发滚动，是有 bug 的，页面是会卡住不动的。<br>国内没有人讨论这个问题，国外倒是很多，例如下面的描述：<br><img src="https://i.imgur.com/yaBiBJf.jpg" alt="https://i.imgur.com/yaBiBJf.jpg"><br>收集了很多资料，用了之后，下面的方法真正的解决了我的问题，真是直呼神奇，方案如下图：<br>图一：<br><img src="https://i.imgur.com/AJfzhbX.jpg" alt="https://i.imgur.com/AJfzhbX.jpg"><br>图二：<br><img src="https://i.imgur.com/lyaQebD.jpg" alt="https://i.imgur.com/lyaQebD.jpg"><br>方法就是在<code>webkit-overflow-scrolling:touch</code>属性的下一层子元素上，将<code>height</code>加 1%或 1px。从而主动触发<code>scrollbar</code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main-inner</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="built_in">calc</span>(100% + 1px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*你也可以直接加伪元素上：*/</span></span><br><span class="line"><span class="selector-tag">main</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="built_in">calc</span>(100% + 1px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这个方案不得不说真的好用。。当然还有其他方案，不过要写 js 或者 jq 了，麻烦。</li></ol><p><code>不过</code>，非弹出层的横向自定义的滚动使用该 css 属性还能凑合。</p><h5 id="最终解决方案：😄-1"><a href="#最终解决方案：😄-1" class="headerlink" title="最终解决方案：😄"></a>最终解决方案：😄</h5><p>就是使用<a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener">iScroll</a>这样的库</p><h2 id="ios-设备自定义滑块无法控制原生滚动条"><a href="#ios-设备自定义滑块无法控制原生滚动条" class="headerlink" title="ios 设备自定义滑块无法控制原生滚动条"></a>ios 设备自定义滑块无法控制原生滚动条</h2><p>如下图我想通过这个按钮来快速滚动页面<br><img src="https://i.imgur.com/N8Vw5tJ.jpg" alt="https://i.imgur.com/N8Vw5tJ.jpg"><br>查了一些资料，这种交互在 app 中比较常见，应用在网页中的没查到</p><h5 id="对应处理方法-2"><a href="#对应处理方法-2" class="headerlink" title="对应处理方法"></a>对应处理方法</h5><ol><li>自定义滚动盒子及滑块；</li><li>使用插件 <a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener">iScroll</a> ,<a href="http://manos.malihu.gr/jquery-custom-content-scroller/" target="_blank" rel="noopener">jquery-custom-content-scroller</a></li></ol><h6 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h6><p>使用以上办法，js 无法监听 window 的滚事件，以及元素 的 offsetTop 值也会随页面滚动变化 （页面需要用到的 window.scrollTop 和 offsetTop 时）</p><h2 id="移动端-ios-直接设置-currentTime-无效解决方法"><a href="#移动端-ios-直接设置-currentTime-无效解决方法" class="headerlink" title="移动端 ios 直接设置 currentTime 无效解决方法"></a>移动端 ios 直接设置 currentTime 无效解决方法</h2><h5 id="情况-音乐从一个页面进入另一个页面后，要接着上一页面播放时间播放，所以进入新页面后设置-currentTime-为上个页面播放时间"><a href="#情况-音乐从一个页面进入另一个页面后，要接着上一页面播放时间播放，所以进入新页面后设置-currentTime-为上个页面播放时间" class="headerlink" title="情况: 音乐从一个页面进入另一个页面后，要接着上一页面播放时间播放，所以进入新页面后设置 currentTime 为上个页面播放时间"></a>情况: 音乐从一个页面进入另一个页面后，要接着上一页面播放时间播放，所以进入新页面后设置 currentTime 为上个页面播放时间</h5><p>安卓是页面加载时触发；ios 是 play()后才触发<br>ios：直接给<code>currentTime</code>赋值是无效的，会变成 0</p><h6 id="最终解决方案：😄-2"><a href="#最终解决方案：😄-2" class="headerlink" title="最终解决方案：😄"></a>最终解决方案：😄</h6><p>在判断音乐可播放时（canplay）再设置 currentTime，但是注意这个只能触发一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>._audio).one(<span class="string">"canplay"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">//设置播放时间</span></span><br><span class="line">  <span class="keyword">this</span>._audio.currentTime = isPercentage</span><br><span class="line">    ? <span class="built_in">Math</span>.floor(<span class="keyword">this</span>._audio.duration * (num / <span class="number">100</span>))</span><br><span class="line">    : num;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="safari-利用原生滚动实现元素悬浮及动画"><a href="#safari-利用原生滚动实现元素悬浮及动画" class="headerlink" title="safari 利用原生滚动实现元素悬浮及动画"></a>safari 利用原生滚动实现元素悬浮及动画</h2><h4 id="情况-1-利用原生滚动实现滚动悬浮效果卡顿问题（fixed-translateY）"><a href="#情况-1-利用原生滚动实现滚动悬浮效果卡顿问题（fixed-translateY）" class="headerlink" title="情况 1 利用原生滚动实现滚动悬浮效果卡顿问题（fixed,translateY）"></a>情况 1 利用原生滚动实现滚动悬浮效果卡顿问题（fixed,translateY）</h4><p>原因分析：<br>iOS 最先响应屏幕反应。<br>响应顺序依次为<code>Touch——Media——Service——Core</code>架构，当用户只要触摸接触了屏幕之后，<br>系统就会最优先去处理屏幕显示也就是 Touch 这个层级，然后才是媒体（Media），服务（Service）以及 Core 架构。<br><img src="https://i.imgur.com/vTqMivL.jpg" alt="https://i.imgur.com/vTqMivL.jpg"><br>所以说，当系统接收到 Touch 事件之后会优先响应，此时会暂停屏幕上包括 js、css 的渲染。<br>这个时候不光是 css 动画不动了，哪怕页面没有加载完如果你手指头还停留在屏幕上那么页面也不会继续加载，直到你的手松开。</p><blockquote><p>请注意，<a href="https://stackoverflow.com/questions/20318002/animate-on-scroll-in-mobile-safari" target="_blank" rel="noopener">iOS设备会在滚动过程中冻结DOM操作</a>，并在滚动完成时将其排队以应用。我们目前正在研究允许在滚动开始之前应用DOM操作的方法。</p></blockquote><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><ol><li>自定义滚动元素<br>缺点:<ol><li>浏览器的导航栏及工具栏无法隐藏</li><li>需要执行动画的元素的offsetTop 会随滚动减小</li></ol></li><li>使用滚动插件<br>缺点:<ol><li>浏览器的导航栏及工具栏无法隐藏</li><li>无法获取元素的 offsetTop 值来达到准确的fixed 定位，部分插件会提供滚动值，如 iScroll.</li></ol></li></ol><h4 id="最终解决方案：😄-3"><a href="#最终解决方案：😄-3" class="headerlink" title="最终解决方案：😄"></a>最终解决方案：😄</h4><ol><li>滚动中出发元素fixed的事件改为 css 属性 position:sticky 实现悬浮；</li></ol><h2 id="额外知识"><a href="#额外知识" class="headerlink" title="额外知识"></a>额外知识</h2><p>写动画时注意一下几点:</p><ol><li>尽量使用transform实现动画，避免使用height,width,margin,padding,left等；</li><li>要求较高时，可以开启浏览器GPU硬件加速：让浏览器在渲染动画时从CPU转向GPU<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">webkit-transform</span>: <span class="selector-tag">translate3d</span>(0,0,0);</span><br><span class="line">// 或</span><br><span class="line"><span class="selector-tag">webkit-transform</span>: <span class="selector-tag">translateZ</span>(0);</span><br><span class="line"></span><br><span class="line">// 值为0并没有真正使用3D效果，但浏览器却因此开启了GPU硬件加速模式。</span><br><span class="line">// 通过开启GPU硬件加速虽然可以提升动画渲染性能或解决一些棘手问题，但使用仍需谨慎，</span><br><span class="line">// 使用前一定要进行严谨的测试，否则它反而会大量占用浏览网页用户的系统资源，尤其是在移动端，肆无忌惮的开启GPU硬件加速会导致大量消耗设备电量，降低电池寿命等问题</span><br></pre></td></tr></table></figure></li><li>如动画过程有闪烁（通常发生在动画开始的时候），可以尝试下面的Hack<br>通过-webkit-transform:transition3d/translateZ开启GPU硬件加速之后，<br>有些时候可能会导致浏览器频繁闪烁或抖动，可以尝试以下办法解决之<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">backface-visibility</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="selector-tag">perspective</span>: 1000;</span><br><span class="line">// -webkit-transform-style: preserve-3d; /*保留3D空间*/</span><br></pre></td></tr></table></figure></li><li>尽可能少的使用box-shadows与gradients，box-shadows与gradients往往都是页面的性能杀手，尤其是在一个元素同时都使用了它们.</li><li>尽可能的让动画元素不在文档流中，以减少重排<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">fixed</span>;</span><br><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br></pre></td></tr></table></figure>我们一起来看下CSS3动画其中一些属性性能消耗图:<br><img src="https://i.imgur.com/qdsIPkZ.jpg" alt="https://i.imgur.com/qdsIPkZ.jpg"><br>性能消耗图，由此可见最受欢饮和性能最好的莫过于<code>transform</code>和<code>opacity</code>了<br>原因：CSS动画属性会触发整个页面的重排<code>relayout</code>、重绘<code>repaint</code>、重组<code>recomposite</code><br>Paint通常是其中最花费性能的，尽可能避免使用触发paint的CSS动画属性，<br>这也是为什么我们推荐在CSS动画中使用<code>webkit-transform: translateX(3em)</code>的方案代替使用<code>left: 3em</code>，<br>因为left会额外触发layout与paint，而<code>webkit-transform</code>只触发整个页面<code>composite</code><br>（这也是为什么推荐在CSS动画中使用<code>webkit-transform: translateX(500px)</code>的方案代替使用<code>left: 500px</code>）；</li></ol><h3 id="页面绘制优化"><a href="#页面绘制优化" class="headerlink" title="页面绘制优化"></a>页面绘制优化</h3><ol><li>简化浏览器重绘的复杂度<br>绘制，是填充像素的过程，这些像素将最终显示在用户的屏幕上。通常，这个过程是整个渲染流水线中耗时最长的一环，因此也是最需要避免发生的一环。<ol><li>CSS属性中，除了transform和opacity之外，修改任何属性都会触发绘制</li><li>如果布局被触发，那么接下来绘制一定会被触发。因为改变一个元素的几何属性就意味着该元素的所有像素都需要重新渲染！</li><li>如果改变元素的非几何属性，也可能触发绘制，比如背景、文字颜色或者阴影效果，尽管这些属性的改变不会触发布局。</li></ol></li><li>减小浏览器重绘区域<br>绘制并非总是在内存中的单层画面里完成的。实际上，浏览器在必要时将会把一帧画面绘制成多层画面，然后将这若干层画面合并成一张图片显示到屏幕上。<br><img src="https://i.imgur.com/0S2bmHf.jpg" alt="https://i.imgur.com/0S2bmHf.jpg"><br>这种绘制方式的好处是，使用tranforms来实现移动效果的元素将会被正常绘制，同时不会触发对其他元素的绘制。<br>在页面中创建一个新的渲染层的最好方式就是使用CSS属性will-change，Chrome/Opera/Firefox都支持该属性。<br>同时再与transform属性一起使用，就会创建一个新的组合层：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.moving-element</span> &#123;</span><br><span class="line"> <span class="attribute">will-change</span>: transform;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>对于那些目前还不支持will-change属性、但支持创建渲染层的浏览器，比如Safari和Mobile Safari，<br>你可以使用一个3D transform属性来强制浏览器创建一个新的渲染层：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.moving-element</span> &#123;</span><br><span class="line"> <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>但需要注意的是：不要创建太多的渲染层。因为每创建一个新的渲染层，就意味着新的内存分配和更复杂的层的管理。</li><li>避免大规模、复杂的布局<br>上面提到的，由于框架的限制，页面布局相对需求来说复杂很多。开发中应该尽量避免复杂的DOM结构，复杂的DOM结构更容易引起大面积的重绘。</li><li>优先使用渲染层合并属性<br>渲染层的合并，就是把页面中完成了绘制过程的部分合并成一层，然后显示在屏幕上。<br>使用<code>transform/opacity</code>来实现动画效果，目前只有<code>transforms</code>和<code>opacity</code>这两个属性不会触发浏览器的布局和绘制，<br>对网页元素这两个属性的修改会直接触发渲染层合并。</li><li>优化JavaScript的执行效率<ol><li>对于动画效果的实现，避免使用setTimeout或setInterval，请使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener">requestAnimationFrame</a>。</li><li>把耗时长的JavaScript代码放到<a href="https://www.w3schools.com/html/html5_webworkers.asp" target="_blank" rel="noopener">Web Workers</a>中去做。<br>这里可以使用<code>Chrome DevTools</code>的<code>Timeline</code>和<code>JavaScript Profiler</code>来分析JavaScript的性能</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文转载自一位不愿透露姓名的开发者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在平时的 H5 移动端开发时，我们难
      
    
    </summary>
    
    
      <category term="Frontends" scheme="https://www.bluesleeword.ml/categories/Frontends/"/>
    
    
      <category term="前端" scheme="https://www.bluesleeword.ml/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
